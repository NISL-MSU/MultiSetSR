import sympy as sp
import numpy as np
from EquationLearning.utils import get_project_root
from EquationLearning.Data.GenerateDatasets import DataLoader

np.random.seed(7)


def evaluate(exp, Xs, Ys, xvars):
    exp = sp.sympify(exp)
    fs_lambda = sp.lambdify(sp.flatten(xvars), exp)
    if Xs.ndim > 1:
        ys = fs_lambda(*list(Xs.T))
    else:
        ys = fs_lambda(Xs)
    return np.mean((Ys - ys)**2)


####################################
# Parameters
####################################
names = ['E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9', 'E10', 'E11', 'E12', 'E13']
noise = 0
noise_suff = '/Without-noise/'
if noise > 0:
    noise_suff = '/Noise_' + str(noise) + '/'

# Methods
methods = ['PYSR', 'TaylorGP', 'NESYMRES', 'E2E', 'MST']

####################################
# Analyze one variable at a time
####################################
mse_results = {name: {} for name in names}
for name in names:
    namex = name
    if name == 'E10':
        namex = 'CS1'
    elif name == 'E11':
        namex = 'CS2'
    elif name == 'E12':
        namex = 'CS3'
    elif name == 'E13':
        namex = 'CS4'
    ####################################
    # Load underlying equation
    ####################################
    dataLoader = DataLoader(name=namex, extrapolation=True).dataset
    X, Y, var_names, expr = dataLoader.X, dataLoader.Y, dataLoader.names, dataLoader.expr
    print("Underlying function: " + str(expr))
    for im, method in enumerate(methods):
        # Load the expressions generated by each method
        path = str(get_project_root().parent) + "/output/LearnedEquations" + noise_suff + namex + '/' + method + ".txt"
        try:
            with open(path, "r") as myfile:
                expr_pred = myfile.read().splitlines()[0]

            # Evaluate original expression (this is expected to be 0, just to verify)
            MSE_orig = evaluate(expr, X, Y, var_names)
            # Evaluate original expression
            if method == 'PYSR' and name == 'E8':
                print()
            mse_results[name][method] = evaluate(expr_pred, X, Y, var_names)
        except:
            mse_results[name][method] = '---'

# Generate LaTeX table
latex_table = "\\begin{table}[]\n\\resizebox{\\textwidth}{!}{%\n"
latex_table += "\\begin{tabular}{|c|" + "c|" * len(methods) + "}\n\\hline\n"
latex_table += "\\textbf{Problem} & " + " & ".join(methods) + " \\\\\n\\hline\n"

for name in names:
    row = f"{name} & " + " & ".join(f"{mse_results[name][method]:.3e}"
                                    if isinstance(mse_results[name][method], float) else mse_results[name][method]
                                    for method in methods) + " \\\\\n\\hline\n"
    latex_table += row

latex_table += "\\end{tabular}%\n}\n\\end{table}"

print(latex_table)
